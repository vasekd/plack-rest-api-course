#! /usr/bin/env perl

use strict;
use warnings;
use utf8;

use autodie;
use FindBin ();

use lib (".", "$FindBin::Bin/../Presentation-Builder/lib/");

use Presentation::Builder::SlideCollection::Reveal;
use Presentation::Builder::RunEnv;
use Presentation::Builder::RunCmd qw/cmdo cd/;

# Parameters:
my $sleep_mult = (defined $ARGV[1]) ? $ARGV[1] : 1;
my $verbose_level = $ARGV[2] // 3;

my $temp_user_name = 'vasek';
my $course_dir = 'prbuilder';


my $sc = Presentation::Builder::SlideCollection::Reveal->new(
	title => 'Rest API in Plack(PSGI)',
	subtitle => '',
	author => 'Václav Dovrtěl',
#	author_url => '',
	date => 'Mar 2015',
	revealjs_dir => File::Spec->catdir( $FindBin::RealBin, '..', 'reveal.js','js', 'reveal.js' ),
	out_fpath => File::Spec->catfile( $FindBin::RealBin, '..', 'reveal.js', 'index.html' ),
	sleep_mult => $sleep_mult,
	vl => $verbose_level,
);
sub ap { $sc->process_slide_part(@_) };
sub pc { $sc->process_command(@_) };
sub ar { $sc->add_slide_raw(@_) };
sub sl_sleep { $sc->process_sleep(@_) };

sub img {
	my ( $img_fname, $width ) = @_;
	$width //= '600px';
	return sprintf(
		'<img%s src="%s">',
		(defined $width) ? qq/ width="$width"/ : '',
		'./img/' . $img_fname
	);
}

my $whoami = pc cmdo 'whoami', no => 1;
die "No user '$temp_user_name' but '$whoami'.\n" unless $whoami eq $temp_user_name;

my $home_dir = '/home/'.$temp_user_name;
my $base_dir = $home_dir . '/' . $course_dir;
my $tmp_dir = $home_dir . '/' . $course_dir . '/temp';

die "Directory '$base_dir' not found." unless -d $base_dir;

my $run_env = Presentation::Builder::RunEnv->new(
	reset_env => sub {
		pc cmdo 'stty cols 70', no => 1;
		pc cmdo "mkdir -p $tmp_dir", no => 1;
	},
	init_env => sub {
		chdir( $home_dir );
	},
);

$sc->add_slide(
	'Table of Contents',
	markdown => <<'MD_END',

 * PSGI, Plack intro
 * Rest API middlewares
 * Demo

MD_END
);

$sc->add_slide(
	'Overview',
	sub {
		ar img 'overview.png', '850px';
	}
);

$sc->add_slide(
	'PSGI, Plack',
	sub {
		ar img 'psgi.png', '850px';
	}
);

$sc->add_slide(
	'PSGI',
	markdown => <<'MD_END',

Interface

Author: Tatsuhiko Miyagawa

Inspired by: Python's WSGI and Ruby's Rack.

[http://plackperl.org/](http://plackperl.org/)

MD_END
);

$sc->add_slide(
	'Hello World',
	markdown => <<'MD_END',

<pre><code data-trim>
 my $app = sub { 
 	my $env = shift;

	return [ 
		200, # Status
		['Content-Type', 'text/plain'], # Header
		['Hello World'] # Body
	]
 }
 </code></pre>

MD_END
);

$sc->add_slide(
	'Example 1',
	markdown => <<'MD_END',

	[Hello World example](https://github.com/vasekd/plack-rest-api-course/tree/master/example1)

MD_END
);

$sc->add_slide(
	'Plack',
	markdown => <<'MD_END',

Tools

* Middleware - Plack::Middleware::*
* Application - Plack::App::* (::File, ::Proxy, ...)
* Handler - Plack::Handler::* (::CGI, ::FCGI ...)

MD_END
);

$sc->add_slide(
	'Middleware',
	sub {
		ar img 'middleware.png', '850px';
	}	
);

$sc->add_slide(
	'Hello World Middleware',
	markdown => <<'MD_END',

<pre><code data-trim>

  my $mw = sub {
      my $env = shift;

      ### Pre App

      ### App
      my $res = $app->($env);

      ### Post App
      return $res;
  };

 }
 </code></pre>

MD_END
);

$sc->add_slide(
	'Example 2',
	markdown => <<'MD_END',

	[Hello World Middleware example](https://github.com/vasekd/plack-rest-api-course/tree/master/example2)

MD_END
);

$sc->add_slide(
	'Plack::Builder',
	markdown => <<'MD_END',

<pre><code data-trim>

  use Plack::Builder;

  my $app = sub { ... };

  builder {
      enable "Deflater";
      enable "Session", store => "File";
      enable "Debug", panels => [ qw(DBITrace Memory Timer) ];
      enable "+My::Plack::Middleware";
      $app;
  };

 </code></pre>

MD_END
);

$sc->add_slide(
	'Example 3',
	markdown => <<'MD_END',

	[Plack::Builder example](https://github.com/vasekd/plack-rest-api-course/tree/master/example3)

MD_END
);

$sc->add_slide(
	'Performance',
	markdown => <<'MD_END',

4core i5, 8GB RAM

"Hello World" test:

 * Monoceros - 19k req/s
 * Twiggy (PreFork) - 14k req/s
 * Starman - 10k req/s
 * NodeJS - 5k req/s

MD_END
);

$sc->add_slide(
	'Rest API middlewares',
	markdown => <<'MD_END',

MD_END
);

$sc->add_slide(
	'Libraries',
	sub {
		ar img 'restapi.png', '600px';
	}	
);

$sc->add_slide(
	'Demo',
	markdown => <<'MD_END',

[github.com/vasekd/plack-rest-api-example](https://github.com/vasekd/plack-rest-api-example)

MD_END
);

$sc->add_slide(
	' ',
	markdown => <<'MD_END',
Václav Dovrtěl
<br><br>
<small>Presentation generated by [github.com/mj41/Presentation-Builder](https://github.com/mj41/Presentation-Builder)<br>
powered by [github.com/hakimel/reveal.js](https://github.com/hakimel/reveal.js).
</small>

MD_END
);

$sc->run_all( $run_env );
